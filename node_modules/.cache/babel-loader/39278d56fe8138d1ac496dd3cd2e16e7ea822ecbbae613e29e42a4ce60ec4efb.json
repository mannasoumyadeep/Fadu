{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\prate\\\\OneDrive\\\\Desktop\\\\PYTHON Files\\\\fadu\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  var _players$currentPlaye, _players$currentPlaye2, _players$currentPlaye3;\n  const [gameStarted, setGameStarted] = useState(false);\n  const [numPlayers, setNumPlayers] = useState(2);\n  const [numRounds, setNumRounds] = useState(5);\n  const [currentRound, setCurrentRound] = useState(1);\n  const [players, setPlayers] = useState([]);\n  const [currentPlayer, setCurrentPlayer] = useState(0);\n  const [deck, setDeck] = useState([]);\n  const [tableCard, setTableCard] = useState(null);\n  const [selectedCard, setSelectedCard] = useState(null);\n  const [showWinner, setShowWinner] = useState(false);\n  const [gameWinners, setGameWinners] = useState([]);\n  // New flag to track whether the player has drawn a card this turn\n  const [hasDrawn, setHasDrawn] = useState(false);\n\n  // Initialize deck\n  const initializeDeck = () => {\n    const suits = ['Hearts', 'Diamonds', 'Clubs', 'Spades'];\n    const values = Array.from({\n      length: 13\n    }, (_, i) => i + 1);\n    let newDeck = [];\n    for (const suit of suits) {\n      for (const value of values) {\n        newDeck.push({\n          suit,\n          value\n        });\n      }\n    }\n    return newDeck.sort(() => Math.random() - 0.5);\n  };\n\n  // Draw card from deck\n  // Note: This function now just adds one card and sets a flag so that the player\n  // can then play any card from their hand.\n  const drawCard = () => {\n    if (deck.length === 0) {\n      reshuffleDeck();\n      return;\n    }\n    // Prevent drawing more than one card per turn\n    if (hasDrawn) return;\n    const newDeck = [...deck];\n    const newPlayers = [...players];\n    const drawnCard = newDeck.pop();\n    newPlayers[currentPlayer].hand.push(drawnCard);\n    setDeck(newDeck);\n    setPlayers(newPlayers);\n    setHasDrawn(true);\n  };\n\n  // Reshuffle deck\n  const reshuffleDeck = () => {\n    const newDeck = initializeDeck();\n    setDeck(newDeck);\n  };\n\n  // Play selected card\n  const playCard = () => {\n    if (selectedCard === null) return;\n    const newPlayers = [...players];\n    const playedCard = newPlayers[currentPlayer].hand[selectedCard];\n\n    // If the player has not drawn a card this turn, enforce that the card must match the table card's value.\n    // (This means the player is only allowed to play a non-matching card if they have drawn a card.)\n    if (!hasDrawn && tableCard && playedCard.value !== tableCard.value) {\n      alert(\"You must play a card that matches the table card's value!\");\n      return;\n    }\n\n    // Remove played card from hand\n    newPlayers[currentPlayer].hand.splice(selectedCard, 1);\n\n    // Check if the player has won by playing all cards\n    if (newPlayers[currentPlayer].hand.length === 0) {\n      handlePlayerWin();\n      return;\n    }\n\n    // Update table card and reset state for next turn\n    setTableCard(playedCard);\n    setPlayers(newPlayers);\n    setSelectedCard(null);\n    setHasDrawn(false); // Reset draw flag since turn is over\n\n    // Move to next player\n    setCurrentPlayer((currentPlayer + 1) % players.length);\n  };\n\n  // Handle player winning by playing all cards\n  const handlePlayerWin = () => {\n    const newPlayers = [...players];\n    newPlayers[currentPlayer].score += 4; // Bonus points for playing all cards\n    setPlayers(newPlayers);\n    startNewRound();\n  };\n\n  // Handle call (showing cards)\n  const handleCall = () => {\n    const newPlayers = [...players];\n    let lowestSum = Infinity;\n    let winners = [];\n\n    // Calculate sums and find winners\n    players.forEach((player, index) => {\n      const sum = player.hand.reduce((total, card) => total + card.value, 0);\n      if (sum < lowestSum) {\n        lowestSum = sum;\n        winners = [index];\n      } else if (sum === lowestSum) {\n        winners.push(index);\n      }\n    });\n\n    // Update scores\n    if (winners.includes(currentPlayer)) {\n      newPlayers[currentPlayer].score += 3; // Caller wins\n    } else {\n      newPlayers[currentPlayer].score -= 2; // Caller loses\n      winners.forEach(index => {\n        newPlayers[index].score += 2; // Other winners\n      });\n    }\n    setPlayers(newPlayers);\n    startNewRound();\n  };\n\n  // Start new round\n  const startNewRound = () => {\n    setCurrentRound(prev => prev + 1);\n    if (currentRound >= numRounds) {\n      endGame();\n      return;\n    }\n    const newDeck = initializeDeck();\n    const newPlayers = players.map(player => ({\n      ...player,\n      hand: []\n    }));\n\n    // Deal new hands\n    for (let i = 0; i < 5; i++) {\n      for (let player of newPlayers) {\n        player.hand.push(newDeck.pop());\n      }\n    }\n    setDeck(newDeck);\n    setPlayers(newPlayers);\n    setTableCard(newDeck.pop());\n    setCurrentPlayer(0);\n    setHasDrawn(false);\n  };\n\n  // End game and determine winners\n  const endGame = () => {\n    const maxScore = Math.max(...players.map(p => p.score));\n    const winners = players.filter(p => p.score === maxScore);\n    setGameWinners(winners);\n    setShowWinner(true);\n  };\n\n  // Start new game\n  const handleStartGame = () => {\n    const newDeck = initializeDeck();\n    const newPlayers = Array.from({\n      length: numPlayers\n    }, (_, i) => ({\n      id: i,\n      name: `Player ${i + 1}`,\n      hand: [],\n      score: 0\n    }));\n\n    // Deal initial cards\n    for (let i = 0; i < 5; i++) {\n      for (let player of newPlayers) {\n        player.hand.push(newDeck.pop());\n      }\n    }\n    setDeck(newDeck);\n    setPlayers(newPlayers);\n    setTableCard(newDeck.pop());\n    setCurrentRound(1);\n    setGameStarted(true);\n    setCurrentPlayer(0);\n    setHasDrawn(false);\n  };\n\n  // Reset game\n  const resetGame = () => {\n    setGameStarted(false);\n    setShowWinner(false);\n    setGameWinners([]);\n    setPlayers([]);\n    setDeck([]);\n    setTableCard(null);\n    setSelectedCard(null);\n    setCurrentPlayer(0);\n    setCurrentRound(1);\n    setHasDrawn(false);\n  };\n\n  // If game has not started, show the setup screen.\n  if (!gameStarted) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"setup-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"title\",\n          children: \"Fadu Card Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Number of Players:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            min: \"2\",\n            max: \"8\",\n            value: numPlayers,\n            onChange: e => setNumPlayers(parseInt(e.target.value))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Number of Rounds:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            min: \"1\",\n            value: numRounds,\n            onChange: e => setNumRounds(parseInt(e.target.value))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"start-button\",\n          onClick: handleStartGame,\n          children: \"Start Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Main game interface\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"round-info\",\n        children: [\"Round \", currentRound, \" of \", numRounds]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"title\",\n        children: [\"Current Player: \", (_players$currentPlaye = players[currentPlayer]) === null || _players$currentPlaye === void 0 ? void 0 : _players$currentPlaye.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"scores-container\",\n        children: players.map(player => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"player-score\",\n          children: [player.name, \": \", player.score, \" points\"]\n        }, player.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-area\",\n        children: [tableCard && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          children: [tableCard.value, \" of \", tableCard.suit]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"deck-area\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"deck-card\",\n            children: [\"Deck: \", deck.length, \" cards\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-hand\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Your Cards:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cards-container\",\n          children: (_players$currentPlaye2 = players[currentPlayer]) === null || _players$currentPlaye2 === void 0 ? void 0 : _players$currentPlaye2.hand.map((card, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `card ${selectedCard === index ? 'selected' : ''}`,\n            onClick: () => setSelectedCard(index),\n            children: [card.value, \" of \", card.suit]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"game-button\",\n          onClick: drawCard,\n          disabled: hasDrawn || tableCard && ((_players$currentPlaye3 = players[currentPlayer]) === null || _players$currentPlaye3 === void 0 ? void 0 : _players$currentPlaye3.hand.some(card => card.value === tableCard.value)),\n          children: \"Draw Card\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"game-button\",\n          onClick: playCard,\n          disabled: selectedCard === null,\n          children: \"Play Card\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"game-button\",\n          onClick: handleCall,\n          children: \"Call\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 7\n    }, this), showWinner && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"overlay\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"winner-announcement\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Game Over!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 13\n        }, this), gameWinners.length === 1 ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [gameWinners[0].name, \" wins with \", gameWinners[0].score, \" points!\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"It's a tie between:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 17\n          }, this), gameWinners.map(winner => /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [winner.name, \" with \", winner.score, \" points\"]\n          }, winner.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 19\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"start-button\",\n          onClick: resetGame,\n          children: \"Play Again\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 247,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"64ktkDWeVPn7zA9dyXJ6++kFWnI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","_players$currentPlaye","_players$currentPlaye2","_players$currentPlaye3","gameStarted","setGameStarted","numPlayers","setNumPlayers","numRounds","setNumRounds","currentRound","setCurrentRound","players","setPlayers","currentPlayer","setCurrentPlayer","deck","setDeck","tableCard","setTableCard","selectedCard","setSelectedCard","showWinner","setShowWinner","gameWinners","setGameWinners","hasDrawn","setHasDrawn","initializeDeck","suits","values","Array","from","length","_","i","newDeck","suit","value","push","sort","Math","random","drawCard","reshuffleDeck","newPlayers","drawnCard","pop","hand","playCard","playedCard","alert","splice","handlePlayerWin","score","startNewRound","handleCall","lowestSum","Infinity","winners","forEach","player","index","sum","reduce","total","card","includes","prev","endGame","map","maxScore","max","p","filter","handleStartGame","id","name","resetGame","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","min","onChange","e","parseInt","target","onClick","disabled","some","winner","_c","$RefreshReg$"],"sources":["C:/Users/prate/OneDrive/Desktop/PYTHON Files/fadu/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './styles.css';\r\n\r\nfunction App() {\r\n  const [gameStarted, setGameStarted] = useState(false);\r\n  const [numPlayers, setNumPlayers] = useState(2);\r\n  const [numRounds, setNumRounds] = useState(5);\r\n  const [currentRound, setCurrentRound] = useState(1);\r\n  const [players, setPlayers] = useState([]);\r\n  const [currentPlayer, setCurrentPlayer] = useState(0);\r\n  const [deck, setDeck] = useState([]);\r\n  const [tableCard, setTableCard] = useState(null);\r\n  const [selectedCard, setSelectedCard] = useState(null);\r\n  const [showWinner, setShowWinner] = useState(false);\r\n  const [gameWinners, setGameWinners] = useState([]);\r\n  // New flag to track whether the player has drawn a card this turn\r\n  const [hasDrawn, setHasDrawn] = useState(false);\r\n\r\n  // Initialize deck\r\n  const initializeDeck = () => {\r\n    const suits = ['Hearts', 'Diamonds', 'Clubs', 'Spades'];\r\n    const values = Array.from({ length: 13 }, (_, i) => i + 1);\r\n    let newDeck = [];\r\n\r\n    for (const suit of suits) {\r\n      for (const value of values) {\r\n        newDeck.push({ suit, value });\r\n      }\r\n    }\r\n\r\n    return newDeck.sort(() => Math.random() - 0.5);\r\n  };\r\n\r\n  // Draw card from deck\r\n  // Note: This function now just adds one card and sets a flag so that the player\r\n  // can then play any card from their hand.\r\n  const drawCard = () => {\r\n    if (deck.length === 0) {\r\n      reshuffleDeck();\r\n      return;\r\n    }\r\n    // Prevent drawing more than one card per turn\r\n    if (hasDrawn) return;\r\n\r\n    const newDeck = [...deck];\r\n    const newPlayers = [...players];\r\n    const drawnCard = newDeck.pop();\r\n    newPlayers[currentPlayer].hand.push(drawnCard);\r\n\r\n    setDeck(newDeck);\r\n    setPlayers(newPlayers);\r\n    setHasDrawn(true);\r\n  };\r\n\r\n  // Reshuffle deck\r\n  const reshuffleDeck = () => {\r\n    const newDeck = initializeDeck();\r\n    setDeck(newDeck);\r\n  };\r\n\r\n  // Play selected card\r\n  const playCard = () => {\r\n    if (selectedCard === null) return;\r\n\r\n    const newPlayers = [...players];\r\n    const playedCard = newPlayers[currentPlayer].hand[selectedCard];\r\n\r\n    // If the player has not drawn a card this turn, enforce that the card must match the table card's value.\r\n    // (This means the player is only allowed to play a non-matching card if they have drawn a card.)\r\n    if (!hasDrawn && tableCard && playedCard.value !== tableCard.value) {\r\n      alert(\"You must play a card that matches the table card's value!\");\r\n      return;\r\n    }\r\n\r\n    // Remove played card from hand\r\n    newPlayers[currentPlayer].hand.splice(selectedCard, 1);\r\n\r\n    // Check if the player has won by playing all cards\r\n    if (newPlayers[currentPlayer].hand.length === 0) {\r\n      handlePlayerWin();\r\n      return;\r\n    }\r\n\r\n    // Update table card and reset state for next turn\r\n    setTableCard(playedCard);\r\n    setPlayers(newPlayers);\r\n    setSelectedCard(null);\r\n    setHasDrawn(false); // Reset draw flag since turn is over\r\n\r\n    // Move to next player\r\n    setCurrentPlayer((currentPlayer + 1) % players.length);\r\n  };\r\n\r\n  // Handle player winning by playing all cards\r\n  const handlePlayerWin = () => {\r\n    const newPlayers = [...players];\r\n    newPlayers[currentPlayer].score += 4; // Bonus points for playing all cards\r\n    setPlayers(newPlayers);\r\n    startNewRound();\r\n  };\r\n\r\n  // Handle call (showing cards)\r\n  const handleCall = () => {\r\n    const newPlayers = [...players];\r\n    let lowestSum = Infinity;\r\n    let winners = [];\r\n\r\n    // Calculate sums and find winners\r\n    players.forEach((player, index) => {\r\n      const sum = player.hand.reduce((total, card) => total + card.value, 0);\r\n      if (sum < lowestSum) {\r\n        lowestSum = sum;\r\n        winners = [index];\r\n      } else if (sum === lowestSum) {\r\n        winners.push(index);\r\n      }\r\n    });\r\n\r\n    // Update scores\r\n    if (winners.includes(currentPlayer)) {\r\n      newPlayers[currentPlayer].score += 3; // Caller wins\r\n    } else {\r\n      newPlayers[currentPlayer].score -= 2; // Caller loses\r\n      winners.forEach(index => {\r\n        newPlayers[index].score += 2; // Other winners\r\n      });\r\n    }\r\n\r\n    setPlayers(newPlayers);\r\n    startNewRound();\r\n  };\r\n\r\n  // Start new round\r\n  const startNewRound = () => {\r\n    setCurrentRound(prev => prev + 1);\r\n    if (currentRound >= numRounds) {\r\n      endGame();\r\n      return;\r\n    }\r\n\r\n    const newDeck = initializeDeck();\r\n    const newPlayers = players.map(player => ({\r\n      ...player,\r\n      hand: []\r\n    }));\r\n\r\n    // Deal new hands\r\n    for (let i = 0; i < 5; i++) {\r\n      for (let player of newPlayers) {\r\n        player.hand.push(newDeck.pop());\r\n      }\r\n    }\r\n\r\n    setDeck(newDeck);\r\n    setPlayers(newPlayers);\r\n    setTableCard(newDeck.pop());\r\n    setCurrentPlayer(0);\r\n    setHasDrawn(false);\r\n  };\r\n\r\n  // End game and determine winners\r\n  const endGame = () => {\r\n    const maxScore = Math.max(...players.map(p => p.score));\r\n    const winners = players.filter(p => p.score === maxScore);\r\n    setGameWinners(winners);\r\n    setShowWinner(true);\r\n  };\r\n\r\n  // Start new game\r\n  const handleStartGame = () => {\r\n    const newDeck = initializeDeck();\r\n    const newPlayers = Array.from({ length: numPlayers }, (_, i) => ({\r\n      id: i,\r\n      name: `Player ${i + 1}`,\r\n      hand: [],\r\n      score: 0\r\n    }));\r\n\r\n    // Deal initial cards\r\n    for (let i = 0; i < 5; i++) {\r\n      for (let player of newPlayers) {\r\n        player.hand.push(newDeck.pop());\r\n      }\r\n    }\r\n\r\n    setDeck(newDeck);\r\n    setPlayers(newPlayers);\r\n    setTableCard(newDeck.pop());\r\n    setCurrentRound(1);\r\n    setGameStarted(true);\r\n    setCurrentPlayer(0);\r\n    setHasDrawn(false);\r\n  };\r\n\r\n  // Reset game\r\n  const resetGame = () => {\r\n    setGameStarted(false);\r\n    setShowWinner(false);\r\n    setGameWinners([]);\r\n    setPlayers([]);\r\n    setDeck([]);\r\n    setTableCard(null);\r\n    setSelectedCard(null);\r\n    setCurrentPlayer(0);\r\n    setCurrentRound(1);\r\n    setHasDrawn(false);\r\n  };\r\n\r\n  // If game has not started, show the setup screen.\r\n  if (!gameStarted) {\r\n    return (\r\n      <div className=\"game-container\">\r\n        <div className=\"setup-form\">\r\n          <h1 className=\"title\">Fadu Card Game</h1>\r\n          \r\n          <div className=\"input-group\">\r\n            <label>Number of Players:</label>\r\n            <input\r\n              type=\"number\"\r\n              min=\"2\"\r\n              max=\"8\"\r\n              value={numPlayers}\r\n              onChange={(e) => setNumPlayers(parseInt(e.target.value))}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"input-group\">\r\n            <label>Number of Rounds:</label>\r\n            <input\r\n              type=\"number\"\r\n              min=\"1\"\r\n              value={numRounds}\r\n              onChange={(e) => setNumRounds(parseInt(e.target.value))}\r\n            />\r\n          </div>\r\n\r\n          <button className=\"start-button\" onClick={handleStartGame}>\r\n            Start Game\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Main game interface\r\n  return (\r\n    <div className=\"game-container\">\r\n      <div className=\"game-board\">\r\n        <div className=\"round-info\">\r\n          Round {currentRound} of {numRounds}\r\n        </div>\r\n\r\n        <h1 className=\"title\">Current Player: {players[currentPlayer]?.name}</h1>\r\n        \r\n        <div className=\"scores-container\">\r\n          {players.map(player => (\r\n            <div key={player.id} className=\"player-score\">\r\n              {player.name}: {player.score} points\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n        <div className=\"table-area\">\r\n          {tableCard && (\r\n            <div className=\"card\">\r\n              {tableCard.value} of {tableCard.suit}\r\n            </div>\r\n          )}\r\n          <div className=\"deck-area\">\r\n            <div className=\"deck-card\">\r\n              Deck: {deck.length} cards\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"player-hand\">\r\n          <h2>Your Cards:</h2>\r\n          <div className=\"cards-container\">\r\n            {players[currentPlayer]?.hand.map((card, index) => (\r\n              <div\r\n                key={index}\r\n                className={`card ${selectedCard === index ? 'selected' : ''}`}\r\n                onClick={() => setSelectedCard(index)}\r\n              >\r\n                {card.value} of {card.suit}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"controls\">\r\n          {/* \r\n              The Draw Card button is now disabled if:\r\n              1. The player already drew a card this turn (hasDrawn is true), or \r\n              2. The player has at least one matching card in hand (so they must play that card).\r\n          */}\r\n          <button \r\n            className=\"game-button\"\r\n            onClick={drawCard}\r\n            disabled={hasDrawn || (tableCard && players[currentPlayer]?.hand.some(\r\n              card => card.value === tableCard.value\r\n            ))}\r\n          >\r\n            Draw Card\r\n          </button>\r\n          <button \r\n            className=\"game-button\"\r\n            onClick={playCard}\r\n            disabled={selectedCard === null}\r\n          >\r\n            Play Card\r\n          </button>\r\n          <button \r\n            className=\"game-button\"\r\n            onClick={handleCall}\r\n          >\r\n            Call\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Winner announcement overlay */}\r\n      {showWinner && (\r\n        <>\r\n          <div className=\"overlay\"></div>\r\n          <div className=\"winner-announcement\">\r\n            <h2>Game Over!</h2>\r\n            {gameWinners.length === 1 ? (\r\n              <p>{gameWinners[0].name} wins with {gameWinners[0].score} points!</p>\r\n            ) : (\r\n              <div>\r\n                <p>It's a tie between:</p>\r\n                {gameWinners.map(winner => (\r\n                  <p key={winner.id}>{winner.name} with {winner.score} points</p>\r\n                ))}\r\n              </div>\r\n            )}\r\n            <button className=\"start-button\" onClick={resetGame}>\r\n              Play Again\r\n            </button>\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}