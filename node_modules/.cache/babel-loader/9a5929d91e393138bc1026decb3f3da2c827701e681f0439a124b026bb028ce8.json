{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\prate\\\\OneDrive\\\\Desktop\\\\PYTHON Files\\\\fadu\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  var _players$currentPlaye, _players$currentPlaye2, _players$currentPlaye3;\n  const [gameStarted, setGameStarted] = useState(false);\n  const [numPlayers, setNumPlayers] = useState(2);\n  const [numRounds, setNumRounds] = useState(5);\n  const [currentRound, setCurrentRound] = useState(1);\n  const [players, setPlayers] = useState([]);\n  const [currentPlayer, setCurrentPlayer] = useState(0);\n  const [deck, setDeck] = useState([]);\n  const [tableCard, setTableCard] = useState(null);\n  const [selectedCard, setSelectedCard] = useState(null);\n  const [showWinner, setShowWinner] = useState(false);\n  const [gameWinners, setGameWinners] = useState([]);\n\n  // Initialize deck\n  const initializeDeck = () => {\n    const suits = ['Hearts', 'Diamonds', 'Clubs', 'Spades'];\n    const values = Array.from({\n      length: 13\n    }, (_, i) => i + 1);\n    let newDeck = [];\n    for (const suit of suits) {\n      for (const value of values) {\n        newDeck.push({\n          suit,\n          value\n        });\n      }\n    }\n    return newDeck.sort(() => Math.random() - 0.5);\n  };\n\n  // Draw card from deck\n  const drawCard = () => {\n    if (deck.length === 0) {\n      reshuffleDeck();\n      return;\n    }\n    const newDeck = [...deck];\n    const newPlayers = [...players];\n    const drawnCard = newDeck.pop();\n    newPlayers[currentPlayer].hand.push(drawnCard);\n    setDeck(newDeck);\n    setPlayers(newPlayers);\n    // Move to next player after drawing\n    setCurrentPlayer((currentPlayer + 1) % players.length);\n  };\n\n  // Reshuffle deck\n  const reshuffleDeck = () => {\n    const newDeck = initializeDeck();\n    setDeck(newDeck);\n  };\n\n  // Play selected card\n  const playCard = () => {\n    if (selectedCard === null) return;\n    const newPlayers = [...players];\n    const playedCard = newPlayers[currentPlayer].hand[selectedCard];\n\n    // Check if card matches table card\n    const canPlayCard = !tableCard || playedCard.value === tableCard.value;\n    if (!canPlayCard) {\n      alert(\"You must play a card that matches the table card's value!\");\n      return;\n    }\n\n    // Remove played card from hand\n    newPlayers[currentPlayer].hand.splice(selectedCard, 1);\n\n    // Check if player has won by playing all cards\n    if (newPlayers[currentPlayer].hand.length === 0) {\n      handlePlayerWin();\n      return;\n    }\n    setTableCard(playedCard);\n    setPlayers(newPlayers);\n    setSelectedCard(null);\n\n    // Move to next player if no matching cards left\n    const hasMatchingCard = newPlayers[currentPlayer].hand.some(card => card.value === playedCard.value);\n    if (!hasMatchingCard) {\n      setCurrentPlayer((currentPlayer + 1) % players.length);\n    }\n  };\n\n  // Handle player winning by playing all cards\n  const handlePlayerWin = () => {\n    const newPlayers = [...players];\n    newPlayers[currentPlayer].score += 4; // Bonus points for playing all cards\n    setPlayers(newPlayers);\n    startNewRound();\n  };\n\n  // Handle call (showing cards)\n  const handleCall = () => {\n    const newPlayers = [...players];\n    let lowestSum = Infinity;\n    let winners = [];\n\n    // Calculate sums and find winners\n    players.forEach((player, index) => {\n      const sum = player.hand.reduce((total, card) => total + card.value, 0);\n      if (sum < lowestSum) {\n        lowestSum = sum;\n        winners = [index];\n      } else if (sum === lowestSum) {\n        winners.push(index);\n      }\n    });\n\n    // Update scores\n    if (winners.includes(currentPlayer)) {\n      newPlayers[currentPlayer].score += 3; // Caller wins\n    } else {\n      newPlayers[currentPlayer].score -= 2; // Caller loses\n      winners.forEach(index => {\n        newPlayers[index].score += 2; // Other winners\n      });\n    }\n    setPlayers(newPlayers);\n    startNewRound();\n  };\n\n  // Start new round\n  const startNewRound = () => {\n    setCurrentRound(prev => prev + 1);\n    if (currentRound >= numRounds) {\n      endGame();\n      return;\n    }\n    const newDeck = initializeDeck();\n    const newPlayers = players.map(player => ({\n      ...player,\n      hand: []\n    }));\n\n    // Deal new hands\n    for (let i = 0; i < 5; i++) {\n      for (let player of newPlayers) {\n        player.hand.push(newDeck.pop());\n      }\n    }\n    setDeck(newDeck);\n    setPlayers(newPlayers);\n    setTableCard(newDeck.pop());\n    setCurrentPlayer(0);\n  };\n\n  // End game and determine winners\n  const endGame = () => {\n    const maxScore = Math.max(...players.map(p => p.score));\n    const winners = players.filter(p => p.score === maxScore);\n    setGameWinners(winners);\n    setShowWinner(true);\n  };\n\n  // Start new game\n  const handleStartGame = () => {\n    const newDeck = initializeDeck();\n    const newPlayers = Array.from({\n      length: numPlayers\n    }, (_, i) => ({\n      id: i,\n      name: `Player ${i + 1}`,\n      hand: [],\n      score: 0\n    }));\n\n    // Deal initial cards\n    for (let i = 0; i < 5; i++) {\n      for (let player of newPlayers) {\n        player.hand.push(newDeck.pop());\n      }\n    }\n    setDeck(newDeck);\n    setPlayers(newPlayers);\n    setTableCard(newDeck.pop());\n    setCurrentRound(1);\n    setGameStarted(true);\n    setCurrentPlayer(0);\n  };\n\n  // Reset game\n  const resetGame = () => {\n    setGameStarted(false);\n    setShowWinner(false);\n    setGameWinners([]);\n    setPlayers([]);\n    setDeck([]);\n    setTableCard(null);\n    setSelectedCard(null);\n    setCurrentPlayer(0);\n    setCurrentRound(1);\n  };\n\n  // ... (keep your existing JSX)\n  // Game setup screen\n  if (!gameStarted) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"setup-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"title\",\n          children: \"Fadu Card Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Number of Players:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            min: \"2\",\n            max: \"8\",\n            value: numPlayers,\n            onChange: e => setNumPlayers(parseInt(e.target.value))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Number of Rounds:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            min: \"1\",\n            value: numRounds,\n            onChange: e => setNumRounds(parseInt(e.target.value))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"start-button\",\n          onClick: handleStartGame,\n          children: \"Start Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Main game interface\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"round-info\",\n        children: [\"Round \", currentRound, \" of \", numRounds]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"title\",\n        children: [\"Current Player: \", (_players$currentPlaye = players[currentPlayer]) === null || _players$currentPlaye === void 0 ? void 0 : _players$currentPlaye.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"scores-container\",\n        children: players.map(player => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"player-score\",\n          children: [player.name, \": \", player.score, \" points\"]\n        }, player.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-area\",\n        children: [tableCard && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          children: [tableCard.value, \" of \", tableCard.suit]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"deck-area\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"deck-card\",\n            children: [\"Deck: \", deck.length, \" cards\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-hand\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Your Cards:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cards-container\",\n          children: (_players$currentPlaye2 = players[currentPlayer]) === null || _players$currentPlaye2 === void 0 ? void 0 : _players$currentPlaye2.hand.map((card, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `card ${selectedCard === index ? 'selected' : ''}`,\n            onClick: () => setSelectedCard(index),\n            children: [card.value, \" of \", card.suit]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"game-button\",\n          onClick: drawCard,\n          disabled: tableCard && ((_players$currentPlaye3 = players[currentPlayer]) === null || _players$currentPlaye3 === void 0 ? void 0 : _players$currentPlaye3.hand.some(card => card.value === tableCard.value)),\n          children: \"Draw Card\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"game-button\",\n          onClick: playCard,\n          disabled: selectedCard === null,\n          children: \"Play Card\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"game-button\",\n          onClick: handleCall,\n          children: \"Call\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }, this), showWinner && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"overlay\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"winner-announcement\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Game Over!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 13\n        }, this), gameWinners.length === 1 ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [gameWinners[0].name, \" wins with \", gameWinners[0].score, \" points!\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"It's a tie between:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 17\n          }, this), gameWinners.map(winner => /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [winner.name, \" with \", winner.score, \" points\"]\n          }, winner.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 327,\n            columnNumber: 19\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"start-button\",\n          onClick: resetGame,\n          children: \"Play Again\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 245,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"SOs9OXWR4AzSwG/w8VcJkY7oPPQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","_players$currentPlaye","_players$currentPlaye2","_players$currentPlaye3","gameStarted","setGameStarted","numPlayers","setNumPlayers","numRounds","setNumRounds","currentRound","setCurrentRound","players","setPlayers","currentPlayer","setCurrentPlayer","deck","setDeck","tableCard","setTableCard","selectedCard","setSelectedCard","showWinner","setShowWinner","gameWinners","setGameWinners","initializeDeck","suits","values","Array","from","length","_","i","newDeck","suit","value","push","sort","Math","random","drawCard","reshuffleDeck","newPlayers","drawnCard","pop","hand","playCard","playedCard","canPlayCard","alert","splice","handlePlayerWin","hasMatchingCard","some","card","score","startNewRound","handleCall","lowestSum","Infinity","winners","forEach","player","index","sum","reduce","total","includes","prev","endGame","map","maxScore","max","p","filter","handleStartGame","id","name","resetGame","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","min","onChange","e","parseInt","target","onClick","disabled","winner","_c","$RefreshReg$"],"sources":["C:/Users/prate/OneDrive/Desktop/PYTHON Files/fadu/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './styles.css';\r\n\r\nfunction App() {\r\n  const [gameStarted, setGameStarted] = useState(false);\r\n  const [numPlayers, setNumPlayers] = useState(2);\r\n  const [numRounds, setNumRounds] = useState(5);\r\n  const [currentRound, setCurrentRound] = useState(1);\r\n  const [players, setPlayers] = useState([]);\r\n  const [currentPlayer, setCurrentPlayer] = useState(0);\r\n  const [deck, setDeck] = useState([]);\r\n  const [tableCard, setTableCard] = useState(null);\r\n  const [selectedCard, setSelectedCard] = useState(null);\r\n  const [showWinner, setShowWinner] = useState(false);\r\n  const [gameWinners, setGameWinners] = useState([]);\r\n\r\n  // Initialize deck\r\n  const initializeDeck = () => {\r\n    const suits = ['Hearts', 'Diamonds', 'Clubs', 'Spades'];\r\n    const values = Array.from({ length: 13 }, (_, i) => i + 1);\r\n    let newDeck = [];\r\n\r\n    for (const suit of suits) {\r\n      for (const value of values) {\r\n        newDeck.push({ suit, value });\r\n      }\r\n    }\r\n    \r\n    return newDeck.sort(() => Math.random() - 0.5);\r\n  };\r\n\r\n  // Draw card from deck\r\n  const drawCard = () => {\r\n    if (deck.length === 0) {\r\n      reshuffleDeck();\r\n      return;\r\n    }\r\n\r\n    const newDeck = [...deck];\r\n    const newPlayers = [...players];\r\n    const drawnCard = newDeck.pop();\r\n    newPlayers[currentPlayer].hand.push(drawnCard);\r\n    \r\n    setDeck(newDeck);\r\n    setPlayers(newPlayers);\r\n    // Move to next player after drawing\r\n    setCurrentPlayer((currentPlayer + 1) % players.length);\r\n  };\r\n\r\n  // Reshuffle deck\r\n  const reshuffleDeck = () => {\r\n    const newDeck = initializeDeck();\r\n    setDeck(newDeck);\r\n  };\r\n\r\n  // Play selected card\r\n  const playCard = () => {\r\n    if (selectedCard === null) return;\r\n\r\n    const newPlayers = [...players];\r\n    const playedCard = newPlayers[currentPlayer].hand[selectedCard];\r\n    \r\n    // Check if card matches table card\r\n    const canPlayCard = !tableCard || playedCard.value === tableCard.value;\r\n    \r\n    if (!canPlayCard) {\r\n      alert(\"You must play a card that matches the table card's value!\");\r\n      return;\r\n    }\r\n\r\n    // Remove played card from hand\r\n    newPlayers[currentPlayer].hand.splice(selectedCard, 1);\r\n    \r\n    // Check if player has won by playing all cards\r\n    if (newPlayers[currentPlayer].hand.length === 0) {\r\n      handlePlayerWin();\r\n      return;\r\n    }\r\n\r\n    setTableCard(playedCard);\r\n    setPlayers(newPlayers);\r\n    setSelectedCard(null);\r\n    \r\n    // Move to next player if no matching cards left\r\n    const hasMatchingCard = newPlayers[currentPlayer].hand.some(\r\n      card => card.value === playedCard.value\r\n    );\r\n    \r\n    if (!hasMatchingCard) {\r\n      setCurrentPlayer((currentPlayer + 1) % players.length);\r\n    }\r\n  };\r\n\r\n  // Handle player winning by playing all cards\r\n  const handlePlayerWin = () => {\r\n    const newPlayers = [...players];\r\n    newPlayers[currentPlayer].score += 4; // Bonus points for playing all cards\r\n    setPlayers(newPlayers);\r\n    startNewRound();\r\n  };\r\n\r\n  // Handle call (showing cards)\r\n  const handleCall = () => {\r\n    const newPlayers = [...players];\r\n    let lowestSum = Infinity;\r\n    let winners = [];\r\n\r\n    // Calculate sums and find winners\r\n    players.forEach((player, index) => {\r\n      const sum = player.hand.reduce((total, card) => total + card.value, 0);\r\n      if (sum < lowestSum) {\r\n        lowestSum = sum;\r\n        winners = [index];\r\n      } else if (sum === lowestSum) {\r\n        winners.push(index);\r\n      }\r\n    });\r\n\r\n    // Update scores\r\n    if (winners.includes(currentPlayer)) {\r\n      newPlayers[currentPlayer].score += 3; // Caller wins\r\n    } else {\r\n      newPlayers[currentPlayer].score -= 2; // Caller loses\r\n      winners.forEach(index => {\r\n        newPlayers[index].score += 2; // Other winners\r\n      });\r\n    }\r\n\r\n    setPlayers(newPlayers);\r\n    startNewRound();\r\n  };\r\n\r\n  // Start new round\r\n  const startNewRound = () => {\r\n    setCurrentRound(prev => prev + 1);\r\n    if (currentRound >= numRounds) {\r\n      endGame();\r\n      return;\r\n    }\r\n\r\n    const newDeck = initializeDeck();\r\n    const newPlayers = players.map(player => ({\r\n      ...player,\r\n      hand: []\r\n    }));\r\n\r\n    // Deal new hands\r\n    for (let i = 0; i < 5; i++) {\r\n      for (let player of newPlayers) {\r\n        player.hand.push(newDeck.pop());\r\n      }\r\n    }\r\n\r\n    setDeck(newDeck);\r\n    setPlayers(newPlayers);\r\n    setTableCard(newDeck.pop());\r\n    setCurrentPlayer(0);\r\n  };\r\n\r\n  // End game and determine winners\r\n  const endGame = () => {\r\n    const maxScore = Math.max(...players.map(p => p.score));\r\n    const winners = players.filter(p => p.score === maxScore);\r\n    setGameWinners(winners);\r\n    setShowWinner(true);\r\n  };\r\n\r\n  // Start new game\r\n  const handleStartGame = () => {\r\n    const newDeck = initializeDeck();\r\n    const newPlayers = Array.from({ length: numPlayers }, (_, i) => ({\r\n      id: i,\r\n      name: `Player ${i + 1}`,\r\n      hand: [],\r\n      score: 0\r\n    }));\r\n\r\n    // Deal initial cards\r\n    for (let i = 0; i < 5; i++) {\r\n      for (let player of newPlayers) {\r\n        player.hand.push(newDeck.pop());\r\n      }\r\n    }\r\n\r\n    setDeck(newDeck);\r\n    setPlayers(newPlayers);\r\n    setTableCard(newDeck.pop());\r\n    setCurrentRound(1);\r\n    setGameStarted(true);\r\n    setCurrentPlayer(0);\r\n  };\r\n\r\n  // Reset game\r\n  const resetGame = () => {\r\n    setGameStarted(false);\r\n    setShowWinner(false);\r\n    setGameWinners([]);\r\n    setPlayers([]);\r\n    setDeck([]);\r\n    setTableCard(null);\r\n    setSelectedCard(null);\r\n    setCurrentPlayer(0);\r\n    setCurrentRound(1);\r\n  };\r\n\r\n  // ... (keep your existing JSX)\r\n  // Game setup screen\r\n  if (!gameStarted) {\r\n    return (\r\n      <div className=\"game-container\">\r\n        <div className=\"setup-form\">\r\n          <h1 className=\"title\">Fadu Card Game</h1>\r\n          \r\n          <div className=\"input-group\">\r\n            <label>Number of Players:</label>\r\n            <input\r\n              type=\"number\"\r\n              min=\"2\"\r\n              max=\"8\"\r\n              value={numPlayers}\r\n              onChange={(e) => setNumPlayers(parseInt(e.target.value))}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"input-group\">\r\n            <label>Number of Rounds:</label>\r\n            <input\r\n              type=\"number\"\r\n              min=\"1\"\r\n              value={numRounds}\r\n              onChange={(e) => setNumRounds(parseInt(e.target.value))}\r\n            />\r\n          </div>\r\n\r\n          <button className=\"start-button\" onClick={handleStartGame}>\r\n            Start Game\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Main game interface\r\n  return (\r\n    <div className=\"game-container\">\r\n      <div className=\"game-board\">\r\n        <div className=\"round-info\">\r\n          Round {currentRound} of {numRounds}\r\n        </div>\r\n\r\n        <h1 className=\"title\">Current Player: {players[currentPlayer]?.name}</h1>\r\n        \r\n        <div className=\"scores-container\">\r\n          {players.map(player => (\r\n            <div key={player.id} className=\"player-score\">\r\n              {player.name}: {player.score} points\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n        <div className=\"table-area\">\r\n          {tableCard && (\r\n            <div className=\"card\">\r\n              {tableCard.value} of {tableCard.suit}\r\n            </div>\r\n          )}\r\n          <div className=\"deck-area\">\r\n            <div className=\"deck-card\">\r\n              Deck: {deck.length} cards\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"player-hand\">\r\n          <h2>Your Cards:</h2>\r\n          <div className=\"cards-container\">\r\n            {players[currentPlayer]?.hand.map((card, index) => (\r\n              <div\r\n                key={index}\r\n                className={`card ${selectedCard === index ? 'selected' : ''}`}\r\n                onClick={() => setSelectedCard(index)}\r\n              >\r\n                {card.value} of {card.suit}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"controls\">\r\n          <button \r\n            className=\"game-button\"\r\n            onClick={drawCard}\r\n            disabled={tableCard && players[currentPlayer]?.hand.some(\r\n              card => card.value === tableCard.value\r\n            )}\r\n          >\r\n            Draw Card\r\n          </button>\r\n          <button \r\n            className=\"game-button\"\r\n            onClick={playCard}\r\n            disabled={selectedCard === null}\r\n          >\r\n            Play Card\r\n          </button>\r\n          <button \r\n            className=\"game-button\"\r\n            onClick={handleCall}\r\n          >\r\n            Call\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Winner announcement overlay */}\r\n      {showWinner && (\r\n        <>\r\n          <div className=\"overlay\"></div>\r\n          <div className=\"winner-announcement\">\r\n            <h2>Game Over!</h2>\r\n            {gameWinners.length === 1 ? (\r\n              <p>{gameWinners[0].name} wins with {gameWinners[0].score} points!</p>\r\n            ) : (\r\n              <div>\r\n                <p>It's a tie between:</p>\r\n                {gameWinners.map(winner => (\r\n                  <p key={winner.id}>{winner.name} with {winner.score} points</p>\r\n                ))}\r\n              </div>\r\n            )}\r\n            <button className=\"start-button\" onClick={resetGame}>\r\n              Play Again\r\n            </button>\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}